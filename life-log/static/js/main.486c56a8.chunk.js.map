{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","refreshList","entries","that","localforage","iterate","value","key","iterationNumber","push","then","console","log","sortedEntries","sort","a","b","aTimestamp","Date","getTime","setState","items","catch","err","handleListFilterChange","event","inputVal","target","filteredArray","state","filter","item","stringifiedAndLowerCasedItem","JSON","stringify","toLowerCase","indexOf","length","setTimeout","filterText","handleItemClick","showItemDetails","currentItem","handleDeleteItemClick","itemId","preventDefault","removeItem","closeItemDetailsModal","handleFormSubmit","today","entry","timestamp","toISOString","description","setItem","getItem","showTab","alert","addToLocalDB","toString","updateVDOMArray","concat","handleSearchButtonSubmit","bind","input","React","createRef","this","attr","current","desc","document","getElementById","itemSummary","toLocaleString","innerHTML","classList","add","className","id","onClick","e","onSubmit","type","placeholder","defaultValue","onChange","handleFormChange","style","display","ref","map","downloadCurrentSavedData","importData","htmlFor","aria-label","shareItem","Component","tabId","remove","itemTextToShare","navigator","share","title","text","strEntries","dataStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","click","selectedFile","files","fileReader","FileReader","readAsText","onload","records","parse","result","i","iMax","record","config","driver","INDEXEDDB","name","version","size","storeName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.486c56a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./Bulma-0.9.1.min.css\";\nimport localforage from \"localforage\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      description: \"\",\n    };\n    this.handleSearchButtonSubmit = this.handleSearchButtonSubmit.bind(this);\n    this.input = React.createRef();\n  }\n\n  componentDidMount() {\n    this.refreshList();\n  }\n\n  refreshList = () => {\n    let entries = [];\n\n    // javascript react promises are awkward and weird\n    var that = this;\n\n    localforage\n      .iterate(function (value, key, iterationNumber) {\n        // Resulting key/value pair -- this callback\n        // will be executed for every item in the\n        // database.\n        //console.log([key, JSON.stringify(value)], iterationNumber);\n        //add it to the array\n        entries.push(value);\n      })\n      .then(function () {\n        console.log(\"Iteration has completed\");\n        //console.log('Sorting list with date descending and redisplaying...');\n        // sort by date descending\n        let sortedEntries = entries.sort((a, b) => {\n          let aTimestamp = new Date(a[\"timestamp\"]).getTime();\n          let bTimestamp = new Date(b[\"timestamp\"]).getTime();\n          return bTimestamp - aTimestamp;\n        });\n        //console.log(`sortedEntries = ${JSON.stringify(sortedEntries)}`);\n        that.setState({ items: sortedEntries });\n      })\n      .catch(function (err) {\n        // This code runs if there were any errors\n        console.log(err);\n      });\n  };\n\n  handleFormChange(attr, event) {\n    console.log(attr, event.target.value);\n    this.setState({\n      [attr]: event.target.value,\n    });\n  }\n\n  handleSearchButtonSubmit(event) {\n    let entries = [];\n\n    // javascript react promises are awkward and weird\n    var that = this;\n\n    let inputVal = this.input.current.value;\n    console.log(`inputVal = ${inputVal}`);\n\n    localforage\n      .iterate(function (value, key, iterationNumber) {\n        // Resulting key/value pair -- this callback\n        // will be executed for every item in the\n        // database.\n        //console.log([key, JSON.stringify(value)], iterationNumber);\n        let stringifiedAndLowerCasedItem = JSON.stringify(value).toLowerCase();\n        //console.log(stringifiedAndLowerCasedItem);\n        if (stringifiedAndLowerCasedItem.indexOf(inputVal.toLowerCase()) > -1) {\n          //add it to the array\n          entries.push(value);\n        }\n      })\n      .then(function () {\n        console.log(\"Iteration has completed\");\n        //console.log('Sorting list with date descending and redisplaying...');\n        // sort by date descending\n        let sortedEntries = entries.sort((a, b) => {\n          let aTimestamp = new Date(a[\"timestamp\"]).getTime();\n          let bTimestamp = new Date(b[\"timestamp\"]).getTime();\n          return bTimestamp - aTimestamp;\n        });\n        //console.log(`sortedEntries = ${JSON.stringify(sortedEntries)}`);\n        that.setState({ items: sortedEntries });\n        that.setState({ filterText: inputVal });\n      })\n      .catch(function (err) {\n        // This code runs if there were any errors\n        console.log(err);\n      });\n  }\n\n  handleListFilterChange = (event) => {\n    this.refreshList();\n\n    let inputVal = event.target.value;\n    console.log(`inputVal = ${inputVal}`);\n    const filteredArray = this.state.items.filter((item) => {\n      let stringifiedAndLowerCasedItem = JSON.stringify(item).toLowerCase();\n      console.log(stringifiedAndLowerCasedItem);\n      if (stringifiedAndLowerCasedItem.indexOf(inputVal.toLowerCase()) > -1) {\n        return item;\n      }\n    });\n\n    if (filteredArray.length > 0) {\n      var that = this;\n      setTimeout(function () {\n        that.setState({ items: filteredArray });\n        that.setState({ filterText: inputVal });\n      }, 1000);\n    }\n  };\n\n  handleItemClick = (item) => {\n    //console.log(`Yay! you clicked an item! ${JSON.stringify(item)}`);\n    this.showItemDetails(item);\n    currentItem = item;\n  };\n\n  handleDeleteItemClick = (event) => {\n    event.preventDefault();\n    removeFromLocalDB(currentItem);\n    this.refreshList();\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    let today = new Date();\n\n    // Get input\n    let entry = {\n      timestamp: today.toISOString(),\n      description: this.state.description,\n    };\n\n    // save entry to db\n    addToLocalDB(today.getTime().toString(), entry);\n\n    // Sort list by date descending (i.e. new ones on top)\n    let updateVDOMArray = this.state.items.concat(entry).sort((a, b) => {\n      let aTimestamp = new Date(a[\"timestamp\"]).getTime();\n      let bTimestamp = new Date(b[\"timestamp\"]).getTime();\n      return bTimestamp - aTimestamp;\n    });\n    this.setState({ items: updateVDOMArray });\n  };\n\n  showItemDetails(item) {\n    let itemId = new Date(item[\"timestamp\"]).getTime().toString();\n\n    localforage\n      .getItem(itemId)\n      .then(function (value) {\n        // This code runs once the value has been loaded\n        // from the offline store.\n        //console.log(value);\n        let desc = value[\"description\"];\n        document.getElementById(\"currentItemDesc\").value = desc;\n\n        let itemSummary = `${new Date(item[\"timestamp\"]).toLocaleString()} - ${desc}`;\n\n        document.getElementById(\"currentItemSummary\").innerHTML = itemSummary;\n\n        currentItem = itemId;\n\n        document.getElementById(\"item-modal\").classList.add(\"is-active\");\n      })\n      .catch(function (err) {\n        // This code runs if there were any errors\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"section\">\n          <div className=\"content\">\n            <h3 className=\"has-text-centered\">Life Log</h3>\n          </div>\n          <div className=\"tabs is-centered\">\n            <ul>\n              <li id=\"enter-data-list-item\" className=\"is-active\">\n                <a onClick={(e) => showTab(\"enter-data\", e)}>Enter</a>\n              </li>\n              <li id=\"list-entries-list-item\">\n                <a onClick={(e) => showTab(\"list-entries\", e)}>List</a>\n              </li>\n            </ul>\n          </div>\n          <div id=\"enter-data\" className=\"column\">\n            <form onSubmit={this.handleFormSubmit}>\n              <div className=\"columns is-gapless\">\n                <div className=\"column\" />\n                <div className=\"column\">\n                  <div className=\"field\">\n                    <label className=\"label\">Log stuff here:</label>\n                    <div className=\"control has-icons-left\">\n                      <textarea\n                        className=\"textarea\"\n                        type=\"text\"\n                        placeholder=\"Put anything to describe what life event you want to track\"\n                        defaultValue=\"\"\n                        onChange={this.handleFormChange.bind(\n                          this,\n                          \"description\"\n                        )}\n                      />\n                      <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-asterisk\"></i>\n                      </span>\n                    </div>\n                  </div>\n                  {/* end: description field */}\n\n                  <div className=\"field is-grouped\">\n                    <p className=\"control\">\n                      <a\n                        type=\"submit\"\n                        onClick={this.handleFormSubmit}\n                        className=\"button is-success\"\n                      >\n                        Add\n                      </a>\n                    </p>\n                    <p className=\"control\">\n                      <a className=\"button is-danger\">Clear</a>\n                    </p>\n                  </div>\n                </div>\n                <div className=\"column\" />\n              </div>\n              {/* end: enter-data */}\n            </form>\n          </div>\n          <div id=\"list-entries\" className=\"column\" style={{ display: \"none\" }}>\n            <form onSubmit={this.handleSearchButtonSubmit}>\n              <div className=\"field has-addons\">\n                <div className=\"control is-expanded\">\n                  <input\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Start typing here to filter\"\n                    defaultValue=\"\"\n                    ref={this.input}\n                  />\n                </div>\n                <div className=\"control\">\n                  <a\n                    className=\"button is-info\"\n                    onClick={this.handleSearchButtonSubmit}\n                  >\n                    Search\n                  </a>\n                </div>\n              </div>\n            </form>\n            <table id=\"entry-items\" className=\"table\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Description</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.items &&\n                  this.state.items.map((item) => (\n                    <tr\n                      key={new Date(item[\"timestamp\"]).getTime()}\n                      onClick={(e) => this.handleItemClick(item, e)}\n                    >\n                      <td>{new Date(item[\"timestamp\"]).toLocaleString()}</td>\n                      <td>{item[\"description\"]}</td>\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n            <div className=\"field is-grouped\">\n              <p className=\"control\">\n                <button\n                  onClick={downloadCurrentSavedData}\n                  className=\"button is-info\"\n                >\n                  Download Data\n                </button>\n              </p>\n              <p className=\"control\">\n                <input\n                  type=\"file\"\n                  id=\"importFile\"\n                  style={{ display: \"none\" }}\n                  onChange={importData}\n                />\n                <button className=\"button is-success\">\n                  <label htmlFor=\"importFile\">Import Data</label>\n                </button>\n              </p>\n            </div>\n          </div>\n        </section>\n\n        <div id=\"item-modal\" className=\"modal\">\n          <div className=\"modal-background\"></div>\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">Item Details</p>\n              <button\n                className=\"delete\"\n                aria-label=\"close\"\n                onClick={closeItemDetailsModal}\n              ></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Life Event:</td>\n                    <td>\n                      <textarea\n                        id=\"currentItemDesc\"\n                        className=\"textarea\"\n                        type=\"text\"\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <div id=\"currentItemSummary\"></div>\n            </section>\n            <footer className=\"modal-card-foot\">\n              <button className=\"button is-success\">Save</button>\n              <button\n                onClick={this.handleDeleteItemClick}\n                className=\"button is-danger\"\n              >\n                Delete\n              </button>\n              <button onClick={shareItem} className=\"button is-info\">\n                Share\n              </button>\n            </footer>\n          </div>\n        </div>\n        {/*<!-- end: item-modal --> */}\n      </div>\n    );\n  }\n}\n\n// Sometimes plain old javascript makes everything better\n// So put that stuff here\n\nvar currentItem = \"\";\n\n// Set up localforage to use IndexedDB\nlocalforage.config({\n  driver: localforage.INDEXEDDB, // Force INDEXEDDB; same as using setDriver()\n  name: \"life-log\",\n  version: 1.0,\n  size: 4980736, // Size of database, in bytes. WebSQL-only for now.\n  storeName: \"life_log\", // Should be alphanumeric, with underscores.\n  description: \"life log\",\n});\n\nfunction addToLocalDB(itemId, entry) {\n  console.log(`adding ${JSON.stringify(entry)}`);\n\n  // insert data into local DB\n  localforage\n    .setItem(itemId, entry)\n    .then(function () {\n      return localforage.getItem(\"key\");\n    })\n    .then(function (value) {\n      // we got our value\n      showTab(\"list-entries\");\n    })\n    .catch(function (err) {\n      // we got an error\n      alert(\"adding item failed\");\n    });\n}\n\nfunction removeFromLocalDB(itemId) {\n  localforage\n    .removeItem(itemId)\n    .then(function () {\n      // Run this code once the key has been removed.\n      console.log(`${JSON.stringify(itemId)} deleted!`);\n      closeItemDetailsModal();\n    })\n    .catch(function (err) {\n      // This code runs if there were any errors\n      console.log(err);\n    });\n}\n\nfunction showTab(tabId) {\n  if (tabId === \"enter-data\") {\n    document.getElementById(\"enter-data\").style.display = \"block\";\n    document.getElementById(\"list-entries\").style.display = \"none\";\n    document.getElementById(\"enter-data-list-item\").classList.add(\"is-active\");\n    document\n      .getElementById(\"list-entries-list-item\")\n      .classList.remove(\"is-active\");\n  } else if (tabId === \"list-entries\") {\n    document.getElementById(\"enter-data\").style.display = \"none\";\n    document.getElementById(\"list-entries\").style.display = \"block\";\n    document\n      .getElementById(\"enter-data-list-item\")\n      .classList.remove(\"is-active\");\n    document\n      .getElementById(\"list-entries-list-item\")\n      .classList.add(\"is-active\");\n  }\n  document.getElementById(tabId).style.display = \"block\";\n}\n\nfunction closeItemDetailsModal() {\n  currentItem = \"\";\n  document.getElementById(\"item-modal\").classList.remove(\"is-active\");\n}\n\nfunction shareItem() {\n  console.log(\"Share button clicked! Let's see if anything else happens.\");\n\n  let itemTextToShare =\n    document.getElementById(\"currentItemSummary\").innerHTML ||\n    \"Sorry, your browser and/or phone doesn't allow sharing.\";\n\n  if (navigator.share) {\n    console.log(\n      `Share is allowed. Yay! Will now try to share ${itemTextToShare}`\n    );\n    navigator\n      .share({\n        title: \"Life Log Item\",\n        text: itemTextToShare,\n      })\n      .then(function () {\n        console.log(\"Successful share\");\n      })\n      .catch(function (err) {\n        // This code runs if there were any errors\n        alert(\"Error sharing\", err);\n      });\n  } else {\n    alert(\"Sorry, this only works on Android Chrome.\");\n  }\n}\n\nfunction downloadCurrentSavedData() {\n  console.log(\"Export button clicked! Let's see if anything else happens.\");\n\n  let entries = [];\n\n  localforage\n    .iterate(function (value, key, iterationNumber) {\n      // Resulting key/value pair -- this callback\n      // will be executed for every item in the\n      // database.\n      //console.log([key, JSON.stringify(value)], iterationNumber);\n      //add it to the array\n      entries.push(value);\n    })\n    .then(function () {\n      console.log(\"Iteration has completed\");\n      let strEntries = JSON.stringify(entries);\n      console.log(`downloading as json = ${strEntries}`);\n\n      // create download link from indexeddb entries\n      let dataStr =\n        \"data:text/json;charset=utf-8,\" + encodeURIComponent(strEntries);\n      let downloadAnchorNode = document.createElement(\"a\");\n      downloadAnchorNode.setAttribute(\"href\", dataStr);\n      downloadAnchorNode.setAttribute(\"download\", \"life-log-backup.json\");\n\n      // download the data to your local\n      downloadAnchorNode.click();\n      downloadAnchorNode.remove();\n    })\n    .catch(function (err) {\n      // This code runs if there were any errors\n      console.log(err);\n    });\n}\n\nfunction importData() {\n  let selectedFile = document.getElementById(\"importFile\").files[0];\n  let fileReader = new FileReader();\n  fileReader.readAsText(selectedFile);\n  fileReader.onload = function (e) {\n    let records = JSON.parse(e.target.result);\n    //alert(`records = ${JSON.stringify(records)}`);\n    let i = 0;\n    const iMax = records.length;\n    let alertStr = \"\";\n    for (; i < iMax; i++) {\n      let record = records[i];\n      let itemId = new Date(record[\"timestamp\"]).getTime().toString();\n\n      // insert data into local DB\n      localforage\n        .setItem(itemId, record)\n        .then(function () {\n          return localforage.getItem(\"key\");\n        })\n        .then(function (value) {\n          // we got our value\n          console.log(`${JSON.stringify(record)}\\n`);\n        })\n        .catch(function (err) {\n          // we got an error\n          alert(\"adding item failed\");\n        });\n      //alertStr += `${JSON.stringify(record)}\\n`;\n    }\n    alert(\"Importing data done!\");\n  };\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);\nregisterServiceWorker();"],"sourceRoot":""}